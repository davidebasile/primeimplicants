package io.github.contractautomata.primeimplicants;

import io.github.contractautomata.catlib.automaton.Automaton;
import io.github.contractautomata.catlib.automaton.label.CALabel;
import io.github.contractautomata.catlib.automaton.label.action.Action;
import io.github.contractautomata.catlib.automaton.state.State;
import io.github.contractautomata.catlib.automaton.transition.ModalTransition;
import io.github.contractautomata.catlib.converters.AutDataConverter;
import io.github.contractautomata.catlib.family.FMCA;
import io.github.contractautomata.catlib.family.PartialProductGenerator;
import io.github.contractautomata.catlib.family.Product;
import io.github.contractautomata.catlib.family.converters.DimacsFamilyConverter;
import io.github.contractautomata.catlib.family.converters.FamilyConverter;
import io.github.contractautomata.catlib.family.converters.FeatureIDEfamilyConverter;

import java.io.File;
import java.time.Duration;
import java.time.Instant;
import java.util.Set;

public class Main {
    private static final String dir = System.getProperty("user.dir")+File.separator+"src"+File.separator+"main"+File.separator+"resources"+File.separator;

    public static void main(String[] args) throws Exception {


        Instant start, stop;

        System.out.println("Starting the Orchestration Synthesis with Partial Products Generation... ");
        start = Instant.now();
        withPartialOrderGeneration();
        stop = Instant.now();
        long elapsedTime = Duration.between(start, stop).toMillis();

        System.out.println("Starting Orchestration Synthesis using Prime Implicants... ");

        start = Instant.now();
        withPrimeImplicants();
        stop = Instant.now();
        long elapsedTime2 = Duration.between(start, stop).toMillis();

        System.out.println("Orchestration Synthesis with Partial Products Generation required "+elapsedTime+" milliseconds.");
        System.out.println("Orchestration Synthesis with Prime Implicants required "+elapsedTime2+" milliseconds.");
    }

    private static void withPartialOrderGeneration() throws Exception
    {
        AutDataConverter<CALabel> bdc = new AutDataConverter<>(CALabel::new);
        Automaton<String, Action, State<String>, ModalTransition<String,Action,State<String>,CALabel>> aut = bdc.importMSCA(dir+ "(BusinessClientxHotelxEconomyClient).data");

        //import from FeatureIDE model the products generated by FeatureIDE
        FamilyConverter ffc = new FeatureIDEfamilyConverter();
        Set<Product> sp2 = ffc.importProducts(dir+ "FeatureIDEmodel" + File.separator+"model.xml");

        //in case the products are imported from FeatureIDE,
        //the partial products not generated by FeatureIDE are generated first.
        //The FMCA constructors below optimises the product line against the automaton.
        FMCA faut = new FMCA(aut,new PartialProductGenerator().apply(sp2));


        Automaton<String,Action,State<String>,ModalTransition<String,Action,State<String>,CALabel>> orcfam1 = faut.getOrchestrationOfFamily();

        System.out.println(orcfam1);
    }



    private static void withPrimeImplicants() throws Exception
    {
        AutDataConverter<CALabel> bdc = new AutDataConverter<>(CALabel::new);
        Automaton<String,Action,State<String>,ModalTransition<String,Action,State<String>,CALabel>> aut = bdc.importMSCA(dir+ "(BusinessClientxHotelxEconomyClient).data");

        //false parameter means that only maximal products (models of the formula) are generated,
        //if true all products (models of the formula) are imported
        FamilyConverter dimfc = new DimacsFamilyConverter(false);

        //import Dimac CNF formula models. Dimac file has been created using FeatureIDE export
        Set<Product> sp3 = dimfc.importProducts(dir+ "FeatureIDEmodel" +File.separator+"model.dimacs");

        //in case only the orchestration the family is to be computed, it is faster
        //to only import the maximal products using dimac converter, avoiding the
        //processing of all products and partial products
        FMCA faut = new FMCA(aut,sp3);
        Automaton<String,Action,State<String>,ModalTransition<String,Action,State<String>,CALabel>> orcfam2 = faut.getOrchestrationOfFamily();


        System.out.println(orcfam2);
    }
}